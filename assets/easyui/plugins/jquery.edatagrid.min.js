! function(c) {
  var i = [];

  function d() {
    i = c.grep(i, function(e) {
      return e.length && e.data("edatagrid")
    })
  }

  function a(t) {
    d(), c.map(i, function(e) {
      e[0] != c(t)[0] && e.edatagrid("saveRow")
    }), d()
  }

  function n(t) {
    d(), i = c.grep(i, function(e) {
      return c(e)[0] != c(t)[0]
    })
  }

  function r(l) {
    var s = c.data(l, "edatagrid").options;
    c(l).datagrid(c.extend({}, s, {
      onDblClickCell: function(e, t, i) {
        s.editing && (c(this).edatagrid("editRow", e), o(l, t)), s.onDblClickCell && s.onDblClickCell.call(l, e, t, i)
      },
      onClickCell: function(e, t, i) {
        if (0 <= s.editIndex) {
          var d = c(this);
          s.editing ? d.edatagrid("editRow", e) : setTimeout(function() {
            d.edatagrid("selectRow", s.editIndex)
          }, 0), o(l, t)
        }
        s.onClickCell && s.onClickCell.call(l, e, t, i)
      },
      onBeforeEdit: function(e, t) {
        if (s.onBeforeEdit && 0 == s.onBeforeEdit.call(l, e, t)) return !1;
        s.autoSave && function(e) {
          d();
          for (var t = 0; t < i.length; t++)
            if (c(i[t])[0] == c(e)[0]) return;
          i.push(c(e))
        }(this), s.originalRow = c.extend(!0, [], t)
      },
      onAfterEdit: function(r, o) {
        n(this), s.editIndex = -1;
        var e = o.isNewRecord ? s.saveUrl : s.updateUrl;
        if (e) {
          for (var t = !1, i = c(this).edatagrid("getColumnFields", !0).concat(c(this).edatagrid("getColumnFields")), d = 0; d < i.length; d++) {
            var a = i[d];
            if (c(this).edatagrid("getColumnOption", a).editor && s.originalRow[a] != o[a]) {
              t = !0;
              break
            }
          }
          t ? s.poster.call(l, e, o, function(e) {
            if (e.isError) {
              var t = s.originalRow;
              return c(l).edatagrid("cancelRow", r), c(l).edatagrid("selectRow", r), c(l).edatagrid("editRow", r), s.originalRow = t, void s.onError.call(l, r, e)
            }
            if (e.isNewRecord = null, c(l).datagrid("updateRow", {
                index: r,
                row: e
              }), s.tree) {
              var i = o[s.idField || "id"],
                d = c(s.tree),
                a = d.tree("find", i);
              if (a) a.text = o[s.treeTextField], d.tree("update", a);
              else {
                var n = d.tree("find", o[s.treeParentField]);
                d.tree("append", {
                  parent: n ? n.target : null,
                  data: [{
                    id: i,
                    text: o[s.treeTextField]
                  }]
                })
              }
            }
            s.onSuccess.call(l, r, o), s.onSave.call(l, r, o)
          }, function(e) {
            s.onError.call(l, r, e)
          }) : s.onSave.call(l, r, o)
        } else o.isNewRecord = !1, s.onSave.call(l, r, o);
        s.onAfterEdit && s.onAfterEdit.call(l, r, o)
      },
      onCancelEdit: function(e, t) {
        n(this), s.editIndex = -1, t.isNewRecord && c(this).datagrid("deleteRow", e), s.onCancelEdit && s.onCancelEdit.call(l, e, t)
      },
      onBeforeLoad: function(e) {
        if (0 == s.onBeforeLoad.call(l, e)) return !1;
        if (c(this).edatagrid("cancelRow"), s.tree) {
          var t = c(s.tree).tree("getSelected");
          e[s.treeParentField] = t ? t.id : void 0
        }
      }
    })), s.tree && c(s.tree).tree({
      url: s.treeUrl,
      onClick: function(e) {
        c(l).datagrid("load")
      },
      onDrop: function(e, t, i) {
        var d = c(this).tree("getNode", e).id,
          a = {
            id: t.id,
            targetId: d,
            point: i
          };
        s.poster.call(l, s.treeDndUrl, a, function(e) {
          c(l).datagrid("load")
        })
      }
    })
  }

  function o(e, t) {
    var i, d = c(e).edatagrid("options"),
      a = c(e).datagrid("getEditor", {
        index: d.editIndex,
        field: t
      });
    if (a) i = a.target;
    else {
      var n = c(e).datagrid("getEditors", d.editIndex);
      n.length && (i = n[0].target)
    }
    i && (c(i).hasClass("textbox-f") ? c(i).textbox("textbox").focus() : c(i).focus())
  }
  c(function() {
    c(document).unbind(".edatagrid").bind("mousedown.edatagrid", function(e) {
      var t = c(e.target).closest("div.datagrid-view,div.combo-panel,div.window,div.window-mask");
      t.length ? t.hasClass("datagrid-view") && a(t.children("table")) : a()
    })
  }), c.fn.edatagrid = function(t, e) {
    if ("string" != typeof t) return t = t || {}, this.each(function() {
      var e = c.data(this, "edatagrid");
      e ? c.extend(e.options, t) : c.data(this, "edatagrid", {
        options: c.extend({}, c.fn.edatagrid.defaults, c.fn.edatagrid.parseOptions(this), t)
      }), r(this)
    });
    var i = c.fn.edatagrid.methods[t];
    return i ? i(this, e) : this.datagrid(t, e)
  }, c.fn.edatagrid.parseOptions = function(e) {
    return c.extend({}, c.fn.datagrid.parseOptions(e), {})
  }, c.fn.edatagrid.methods = {
    options: function(e) {
      return c.data(e[0], "edatagrid").options
    },
    loadData: function(e, t) {
      return e.each(function() {
        c(this).edatagrid("cancelRow"), c(this).datagrid("loadData", t)
      })
    },
    enableEditing: function(e) {
      return e.each(function() {
        c.data(this, "edatagrid").options.editing = !0
      })
    },
    disableEditing: function(e) {
      return e.each(function() {
        c.data(this, "edatagrid").options.editing = !1
      })
    },
    isEditing: function(e, t) {
      var i = c.data(e[0], "edatagrid").options.finder.getTr(e[0], t);
      return i.length && i.hasClass("datagrid-row-editing")
    },
    editRow: function(e, a) {
      return e.each(function() {
        var e = c(this),
          t = c.data(this, "edatagrid").options,
          i = t.editIndex;
        if (i != a)
          if (e.datagrid("validateRow", i)) {
            if (0 <= i && 0 == t.onBeforeSave.call(this, i)) return void setTimeout(function() {
              e.datagrid("selectRow", i)
            }, 0);
            if (e.datagrid("endEdit", i), e.datagrid("beginEdit", a), !e.edatagrid("isEditing", a)) return;
            t.editIndex = a, o(this);
            var d = e.datagrid("getRows");
            t.onEdit.call(this, a, d[a])
          } else setTimeout(function() {
            e.datagrid("selectRow", i)
          }, 0)
      })
    },
    addRow: function(e, n) {
      return e.each(function() {
        var i = c(this),
          d = c.data(this, "edatagrid").options;
        if (0 <= d.editIndex) {
          if (!i.datagrid("validateRow", d.editIndex)) return void i.datagrid("selectRow", d.editIndex);
          if (0 == d.onBeforeSave.call(this, d.editIndex)) return void setTimeout(function() {
            i.datagrid("selectRow", d.editIndex)
          }, 0);
          i.datagrid("endEdit", d.editIndex)
        }

        function e(e, t) {
          null == e ? (i.datagrid("appendRow", t), d.editIndex = i.datagrid("getRows").length - 1) : (i.datagrid("insertRow", {
            index: e,
            row: t
          }), d.editIndex = e)
        }
        "object" == typeof n ? e(n.index, c.extend(n.row, {
          isNewRecord: !0
        })) : e(n, {
          isNewRecord: !0
        }), i.datagrid("beginEdit", d.editIndex), i.datagrid("selectRow", d.editIndex), o(this);
        var t = i.datagrid("getRows");
        if (d.tree) {
          var a = c(d.tree).tree("getSelected");
          t[d.editIndex][d.treeParentField] = a ? a.id : 0
        }
        d.onAdd.call(this, d.editIndex, t[d.editIndex])
      })
    },
    saveRow: function(e) {
      return e.each(function() {
        var e = c(this),
          t = c.data(this, "edatagrid").options;
        if (0 <= t.editIndex) {
          if (0 == t.onBeforeSave.call(this, t.editIndex)) return void setTimeout(function() {
            e.datagrid("selectRow", t.editIndex)
          }, 0);
          c(this).datagrid("endEdit", t.editIndex)
        }
      })
    },
    cancelRow: function(e) {
      return e.each(function() {
        var e = c.data(this, "edatagrid").options;
        0 <= e.editIndex && c(this).datagrid("cancelEdit", e.editIndex)
      })
    },
    destroyRow: function(e, n) {
      return e.each(function() {
        var o = c(this),
          l = c.data(this, "edatagrid").options,
          i = [];
        if (null == n) i = o.datagrid("getSelections");
        else
          for (var e = c.isArray(n) ? n : [n], t = 0; t < e.length; t++) {
            var d = l.finder.getRow(this, e[t]);
            d && i.push(d)
          }

        function a(n) {
          var t = o.datagrid("getRowIndex", n);
          if (-1 != t)
            if (n.isNewRecord) o.datagrid("cancelEdit", t);
            else if (l.destroyUrl) {
            var r = n[l.idField || "id"];
            l.poster.call(o[0], l.destroyUrl, {
              id: r
            }, function(e) {
              var t = o.datagrid("getRowIndex", r);
              if (e.isError) return o.datagrid("selectRow", t), void l.onError.call(o[0], t, e);
              if (l.tree) {
                o.datagrid("reload");
                var i = c(l.tree),
                  d = i.tree("find", r);
                d && i.tree("remove", d.target)
              } else o.datagrid("cancelEdit", t), o.datagrid("deleteRow", t);
              l.onDestroy.call(o[0], t, n);
              var a = o.datagrid("getPager");
              a.length && !o.datagrid("getRows").length && (o.datagrid("options").pageNumber = a.pagination("options").pageNumber, o.datagrid("reload"))
            }, function(e) {
              l.onError.call(o[0], t, e)
            })
          } else o.datagrid("cancelEdit", t), o.datagrid("deleteRow", t), l.onDestroy.call(o[0], t, n)
        }
        i.length ? c.messager.confirm(l.destroyMsg.confirm.title, l.destroyMsg.confirm.msg, function(e) {
          if (e) {
            for (var t = 0; t < i.length; t++) a(i[t]);
            o.datagrid("clearSelections")
          }
        }) : c.messager.show({
          title: l.destroyMsg.norecord.title,
          msg: l.destroyMsg.norecord.msg
        })
      })
    }
  }, c.fn.edatagrid.defaults = c.extend({}, c.fn.datagrid.defaults, {
    singleSelect: !0,
    editing: !0,
    editIndex: -1,
    destroyMsg: {
      norecord: {
        title: "Warning",
        msg: "No record is selected."
      },
      confirm: {
        title: "Confirm",
        msg: "Are you sure you want to delete?"
      }
    },
    poster: function(e, t, i, d) {
      c.ajax({
        type: "post",
        url: e,
        data: t,
        dataType: "json",
        success: function(e) {
          i(e)
        },
        error: function(e, t, i) {
          d({
            jqXHR: e,
            textStatus: t,
            errorThrown: i
          })
        }
      })
    },
    autoSave: !1,
    url: null,
    saveUrl: null,
    updateUrl: null,
    destroyUrl: null,
    tree: null,
    treeUrl: null,
    treeDndUrl: null,
    treeTextField: "name",
    treeParentField: "parentId",
    onAdd: function(e, t) {},
    onEdit: function(e, t) {},
    onBeforeSave: function(e) {},
    onSave: function(e, t) {},
    onSuccess: function(e, t) {},
    onDestroy: function(e, t) {},
    onError: function(e, t) {}
  }), c.parser.plugins.push("edatagrid")
}(jQuery);